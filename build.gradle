/*
 * Licensed to Miguel Arregui ("marregui") under one or more contributor
 * license agreements. See the LICENSE file distributed with this work
 * for additional information regarding copyright ownership. You may
 * obtain a copy at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Copyright (c) 2019 - 2022, Miguel Arregui a.k.a. marregui
 */

plugins {
    id 'application'
    id 'net.nemerosa.versioning' version '2.15.0' // https://plugins.gradle.org/plugin/net.nemerosa.versioning
}

group = 'io.quest'
version = '1.0.0'
description = 'Desktop user interface to common Postgres Wire Protocol compatible databases.'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

dependencies {
    implementation 'org.postgresql:postgresql:42.3.0'
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'
    implementation 'com.influxdb:influxdb-client-java:4.1.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-commons:1.8.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:4.0.0'
}

application {
    mainClass = 'io.quest.QuestMain'
    applicationDefaultJvmArgs = [
            '-Xmx2G',
            '-server',
            '-Dfile.encoding=UTF-8',
            '-Dstore.path=.quest'
    ]
}

jar {
    manifest {
        attributes(
                'Main-Class': 'io.quest.QuestMain',
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Branch' : versioning.info.branch,
                'Build-Revision' : versioning.info.commit,
                'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
        )
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    archiveClassifier.set('all')
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

artifacts {
    archives fatJar
}

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion = '7.3'
}
